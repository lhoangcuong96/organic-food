// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum GenderType {
  MALE
  FEMALE
  OTHER
}

model Account {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  email       String      @unique
  fullname    String
  phoneNumber String      @unique
  password    String
  address     String?
  gender      GenderType? @default(OTHER)
  dateOfBirth DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  Session     Session[]
  avatar      String?
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  accessToken  String
  refreshToken String
  createdAt    DateTime @default(now())
  accountId    String   @db.ObjectId
  account      Account  @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

type ProductImage {
  thumbnail String
  banner    String?
  featured  String?
  other     String?
  gallery   String[]
}

model Product {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  slug        String       @unique
  price       Float
  stock       Int
  sold        Int          @default(0)
  sellerId    Int? // ID của người bán, có thể thêm mô hình User nếu cần
  seller      String? // Tên người bán
  image       ProductImage // Danh sách URL hình ảnh sản phẩm
  rating      Float? // Đánh giá trung bình
  reviewCount Int // Số lượng đánh giá
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  isActive    Boolean      @default(true) // Trạng thái sản phẩm
  tags        String[] // Danh sách tag cho sản phẩm

  // tạo quan hệ m-n(many to many) để tạo ra bảng trung gian
  categoryIDs String[]   @db.ObjectId
  categories  Category[] @relation(fields: [categoryIDs], references: [id])

  // 1 product chỉ có 1 khuyến mãi, 
  promotionIDs String[]    @db.ObjectId
  promotion    Promotion[] @relation(fields: [promotionIDs], references: [id])
}

model Promotion {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String?
  discountType  DiscountType
  discountValue Float // giá trị tính bằng % hoặc số tiền
  startDate     DateTime
  endDate       DateTime
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  productIDs String[]  @db.ObjectId
  products   Product[] @relation(fields: [productIDs], references: [id])
}

enum DiscountType {
  PERCENTAGE
  FIXED
}

type CategoryImage {
  thumbnail String
  banner    String
  icon      String
  featured  String
  other     String?
  gallery   String[]
}

model Category {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String        @unique
  slug          String        @unique
  description   String? // Mô tả danh mục
  parentId      String?       @db.ObjectId // ID của danh mục cha (nếu có)
  parent        Category?     @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subCategories Category[]    @relation("CategoryHierarchy")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  image         CategoryImage

  // tạo quan hệ m-n(many to many) để tạo ra bảng trung gian
  productIDs String[]  @db.ObjectId
  products   Product[] @relation(fields: [productIDs], references: [id])
}
